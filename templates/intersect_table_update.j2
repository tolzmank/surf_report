<html>
<head>
<title>Surf Conditions Reporter - {{table_name}}</title>
<link rel="icon" href="/static/icons/wave_icon.svg" type="image/x-icon">
<link href="/static/style.css" rel="stylesheet" type="text/css" />
</head>
<body onload="browseEntries()">
<!-- All template pages use variable names instead of hardcoded text to populate template -->
  
<!-- PAGE TITLE / TABLE NAME -->
 <div class="page-title">
  <h1>Surf Conditions Reporter Database</h1>
  <h2>{{table_name}}</h2>
 </div>


<!-- NAV BAR -->
  <div class="navbar">
    <ul>
      <li><a href="/">Home</a></li>
    </ul>
    <ul>
      <li><a href="/users">Users</a></li>
      <li><a href="/locations">Locations</a></li>
      <li><a href="/stations">Stations</a></li>
      <li><a href="/conditions">Conditions</a></li>
    </ul>
    <ul>
      <li><a href="/locations_stations">Locations-Stations</a></li>
      <li><a href="/users_locations">Users-Locations</a></li>
      <li><a href="/users_conditions">Users-Conditions</a></li>
      <li><a href="/stations_conditions">Stations-Conditions</a></li>
    </ul>
  </div>


<!-- DISPLAY CONTENT -->
{% if reading %}
<div id="browse">
  <form action="/update_stations_conditions/{{reading[0]['reading_id']}}/{{station_id}}" method="POST">
    <input type="hidden" value="{{reading[0]['reading_id']}}" name="reading_id">
    <input type="hidden" value="{{station_id}}" name="station_id">
    <table border="1" cellpadding="5">


  <!-- TABLE HEADER -->
  <thead>

      <!-- SELECTION TITLE -->
      <tr>
        <th colspan="3">
          <p>Update Condition Reading Details for Station:</p>
          <h2 style="color: #00FFFF;">{{station[0]['station_name']}}</h2>
        </th>
      </tr>

      <!-- UPDATE FORM -->
      <!-- iterates over entity's variables from Flask app render -->
      <tr>
        <th>
          <label for="condition">Select Condition Type:</label>
          <select name="condition_id" required>
              <option value="{{reading[0]['condition_id']}}" selected>{{current_condition_type}}</option>
              {% for item in all_conditions %}
              {% if  item['condition_id'] != reading[0]['condition_id'] %}
              <option value="{{item['condition_id']}}">{{item['condition_type']}}</option>
              {% endif %}
              {% endfor %}
          </select>
          </th>
        </tr>

        <tr>
          <th>
            <label for="condition_reading">Condition Reading:</label>
            <input type="number" step="0.01" name="condition_reading" value="{{reading[0]['condition_reading']}}">
          </th>
        </tr>
          
        <tr>
          <th>
            <label for="wind_direction">Wind Direction:</label>
            <select name="wind_direction">
              <option value="{{reading[0]['wind_direction']}}" selected>{{reading[0]['wind_direction']}}</option>
              {% for item in wind_compass %}
              <option value="{{item}}">{{item}}</option>
              {% endfor %}
            </select>
          </th>
        </tr>
          
        <tr>
          <th>
            <input type="datetime-local" name="date_refreshed" value="{{reading[0]['date_refreshed']|replace(' ', 'T')}}">
          </th>
        </tr>
    </thead>

    <tr>
      <th>
        <input type="submit" value="Save Update Reading" name="Update" class="accept-button">
        <button class="cancel-button" type="button" onclick="window.location.href='/stations_conditions/{{reading[0][reading_id]}}/{{station_id}}';">Cancel</button>
      </th>
    </tr>
  </form>
</table>
{% endif %}

</div>


<script >

  function showform(dowhat) {
    /*
    * 1 - Citation for this function:
    * 2 - Date: 10/01/2024
    * 3 - Adapted from the starter code.
    * 4 - Copied and used this starter code as a starting point
    *     for my project. 
    * 
    *     Changed the names of the individual entities
    *     to a generic 'Entry' to make my templating design easier.
    * 
    *     Modified the deleteEntry() function to serve as a 
    *     confirmation window.
    * 
    *     The rest is basically the same as the starter code.
    * 
    * 5 - Source URL: https://github.com/osu-cs340-ecampus/flask-starter-app/tree/master/bsg_people_app
    * 6 - This function is used to reveal or hide forms in my table pages that are
    *     initially hidden by changing the display from 'none' to 'block'
    * four DIVS: browse, insert, update, delete
    * this function sets one visible the others not
    */
    if (dowhat == 'insert'){
      document.getElementById('browse').style.display = 'block';
      // set browse to stay visible, so user can see existing data while adding a new entry
      document.getElementById('insert').style.display = 'block';
      document.getElementById('update').style.display = 'none';
      document.getElementById('delete').style.display = 'none';
    }
    else if (dowhat == 'update'){
      document.getElementById('browse').style.display = 'none';
      document.getElementById('insert').style.display = 'none';
      document.getElementById('update').style.display = 'block';
      document.getElementById('delete').style.display = 'none';
    }
    else if (dowhat == 'delete'){
      document.getElementById('browse').style.display = 'none';
      document.getElementById('insert').style.display = 'none';
      document.getElementById('update').style.display = 'none';
      document.getElementById('delete').style.display = 'block';
    }
    else if (dowhat == 'all'){
      document.getElementById('browse').style.display = 'block';
      document.getElementById('insert').style.display = 'block';
      document.getElementById('update').style.display = 'block';
      document.getElementById('delete').style.display = 'block';
    }
    else { //by default display browse
      document.getElementById('browse').style.display = 'block';
      document.getElementById('insert').style.display = 'none';
      document.getElementById('update').style.display = 'none';
      document.getElementById('delete').style.display = 'none';
    }
  }
  function newEntry() { showform('insert'); }
  function updateEntry(pid) { showform('update'); }

  // DELETE CONFIRM WINDOW
  function deleteEntry(mainItemID, assocItemID, mainItemName, assocItemName, tableName) { 
    if (confirm(`Confirm removal of ${tableName} association: ${assocItemName} from ${mainItemName}?`)) {
      window.location.href = `/delete_{{obj_name}}/${mainItemID}/${assocItemID}`;
    }
  }

  function browseEntries() { showform ('browse'); }
  function showAll() { showform ('all'); }

</script>
<p style="text-align: center; font-size: 12px; color: gray;">Â© Group 1: Kent Tolzmann, Ryan Messenger</p>
</body>
</html>

